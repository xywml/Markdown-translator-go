name: Release

on:
  workflow_dispatch: # 允许手动触发
  push:
    tags:
      - 'v*.*.*' # 仅在推送 vX.Y.Z 格式的 tag 时触发

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This job builds the executables and creates the release
  build-and-release:
    name: Build and Release
    # Use the latest Ubuntu runner available
    runs-on: ubuntu-latest
    # Grant permissions for actions/create-release to create a release
    permissions:
      contents: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checkout the code for the specific tag
      - name: Checkout code
        uses: actions/checkout@v4
        # Fetches all history for all tags and branches - ensures the tag is available
        # Although checkout usually handles tags correctly, this can sometimes help
        # with edge cases or if you need tag annotations later.
        # with:
        #   fetch-depth: 0
      # 2. Set up the Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          # Specify the Go version you want to use for building
          # Using '1.x' will use the latest stable 1.x version
          go-version: '1.x'
          # Optional: Cache Go modules to speed up future builds
          cache: true
      # 3. Build for Linux (amd64)
      #    - GOOS/GOARCH env vars control the target platform
      #    - CGO_ENABLED=0 often simplifies cross-compilation (avoids needing C cross-compilers)
      #    - -ldflags="-s -w" strips debug symbols and DWARF info, reducing binary size
      - name: Build for Linux (amd64)
        run: |
          echo "Building for Linux amd64..."
          GOOS=linux GOARCH=amd64 go build -v -ldflags="-s -w" -o Markdown-translator-go-app-linux-amd64 .
        env:
          CGO_ENABLED: 0
      # 4. Build for Windows (amd64)
      #    - Note the .exe suffix for the output file
      - name: Build for Windows (amd64)
        run: |
          echo "Building for Windows amd64..."
          GOOS=windows GOARCH=amd64 go build -v -ldflags="-s -w" -o Markdown-translator-go-app-windows-amd64.exe .
        env:
          CGO_ENABLED: 0
      # (Optional) 5. Consider creating archives (e.g., .zip, .tar.gz)
      # If you prefer distributing archives instead of raw executables:
      # - name: Archive Linux build
      #   run: tar czvf Markdown-translator-go-app-linux-amd64.tar.gz Markdown-translator-go-app-linux-amd64 README.md LICENSE # Add other files as needed
      # - name: Archive Windows build
      #   run: zip Markdown-translator-go-app-windows-amd64.zip Markdown-translator-go-app-windows-amd64.exe README.md LICENSE # Add other files as needed
      # 6. Create the GitHub Release
      #    - Uses the popular softprops/action-gh-release action
      #    - Automatically uses the pushed tag name
      #    - Uploads the specified files as release assets
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2 # Use v2 or check for the latest stable version
        env:
          # The GITHUB_TOKEN is automatically provided by GitHub Actions
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Define the files to upload. Adjust if you implemented the optional archiving step
          # Use multi-line string syntax for clarity if many files
          files: |
            Markdown-translator-go-app-linux-amd64
            Markdown-translator-go-app-windows-amd64.exe
          # Optional: Customize release name (defaults to tag name)
          name: Release ${{ github.ref_name }}
          # Optional: Add release notes from a file or directly
          # body_path: CHANGELOG.md
          # body: |
          #   Automated release for version ${{ github.ref_name }}
          #   Built binaries for Linux and Windows attached.
          # Optional: Mark as pre-release if tag contains 'beta', 'alpha', 'rc' etc.
          # prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}
          # Optional: Keep as draft until manually published
          # draft: true
